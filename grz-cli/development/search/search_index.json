{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the documentation for <code>grz-cli</code>, a command-line tool for validating, encrypting, and uploading submissions to genome data centers (GDC) from partipating clinics as part of the genomeDE Model Project.</p> <p><code>grz-cli</code> performs the following high-level steps during a submission to a GDC:</p> <ol> <li>Validation of submission data and metadata files.</li> <li>Encryption with Crypt4GH.</li> <li>Upload of the encrypted submission to the GDC's S3 inbox.</li> </ol> <p>To find further instructions on using <code>grz-cli</code>, select the role that best fits you from the navigational menu.</p>"},{"location":"cli/","title":"Command Line Interface","text":""},{"location":"cli/#grz-cli","title":"grz-cli","text":"<pre><code>Usage: grz-cli [OPTIONS] COMMAND [ARGS]...\n\n  Validate, encrypt, decrypt and upload submissions to a GRZ/GDC.\n\nOptions:\n  --version                       Show the version and exit.\n  --log-file FILE                 Path to log file\n  --log-level [DEBUG|INFO|WARNING|ERROR|CRITICAL]\n                                  Set the log level (default: INFO)\n  --help                          Show this message and exit.\n\nCommands:\n  validate  Validate the submission.\n  encrypt   Encrypt a submission.\n  upload    Upload a submission to a GRZ/GDC.\n  submit    Validate, encrypt, and then upload.\n  get-id    Compute the submission ID for a given metadata JSON file.\n</code></pre>"},{"location":"cli/#validate","title":"validate","text":"<pre><code>Usage: grz-cli validate [OPTIONS]\n\n  Validate the submission.\n\n  This validates the submission by checking its checksums, as well as\n  performing basic sanity checks on the supplied metadata. Must be executed\n  before calling `encrypt` and `upload`.\n\nOptions:\n  --submission-dir PATH  Path to the submission directory containing\n                         'metadata/', 'files/', 'encrypted_files/' and 'logs/'\n                         directories  [required]\n  --config-file STRING   Path to config file\n  --force / --no-force   Overwrite files and ignore cached results\n                         (dangerous!)\n  --threads INTEGER      Number of threads to use for parallel operations\n                         [default: 4]\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"cli/#encrypt","title":"encrypt","text":"<pre><code>Usage: grz-cli encrypt [OPTIONS]\n\n  Encrypt a submission.\n\n  Encryption is done with the recipient's public key. Sub-folders\n  'encrypted_files' and 'logs' are created within the submission directory.\n\nOptions:\n  --submission-dir PATH           Path to the submission directory containing\n                                  'metadata/', 'files/', 'encrypted_files/'\n                                  and 'logs/' directories  [required]\n  --config-file STRING            Path to config file\n  --force / --no-force            Overwrite files and ignore cached results\n                                  (dangerous!)\n  --check-validation-logs / --no-check-validation-logs\n                                  Check validation logs before encrypting.\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"cli/#upload","title":"upload","text":"<pre><code>Usage: grz-cli upload [OPTIONS]\n\n  Upload a submission to a GRZ/GDC.\n\nOptions:\n  --submission-dir PATH  Path to the submission directory containing\n                         'metadata/', 'files/', 'encrypted_files/' and 'logs/'\n                         directories  [required]\n  --config-file STRING   Path to config file\n  --threads INTEGER      Number of threads to use for parallel operations\n                         [default: 4]\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"cli/#submit","title":"submit","text":"<pre><code>Usage: grz-cli submit [OPTIONS]\n\n  Validate, encrypt, and then upload.\n\n  This is a convenience command that performs the following steps in order: 1.\n  Validate the submission 2. Encrypt the submission 3. Upload the encrypted\n  submission\n\nOptions:\n  --submission-dir PATH  Path to the submission directory containing\n                         'metadata/', 'files/', 'encrypted_files/' and 'logs/'\n                         directories  [required]\n  --config-file STRING   Path to config file\n  --threads INTEGER      Number of threads to use for parallel operations\n                         [default: 4]\n  --force / --no-force   Overwrite files and ignore cached results\n                         (dangerous!)\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"cli/#get-id","title":"get-id","text":"<pre><code>Usage: grz-cli get-id [OPTIONS] METADATA\n\n  Compute the submission ID for a given metadata JSON file.\n\nOptions:\n  --help  Show this message and exit.\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#running-unreleaseddevelopment-versions","title":"Running unreleased/development versions","text":"<p>First, install <code>uv</code>. We recommend using Conda or Pixi.</p> <p>After cloning the desired branch of the <code>grz-tools</code> repo locally, you can run <code>grz-cli</code> directly from the cloned source repository using:</p> <pre><code>uv run --project path/to/cloned/grz-tools grz-cli --help\n</code></pre>"},{"location":"contributing/#building-the-documentation","title":"Building the documentation","text":"<pre><code>cd packages/grz-cli\nuv run mike deploy --config-file docs/mkdocs.yaml development\nuv run mike serve --config-file docs/mkdocs.yaml\n</code></pre> <p>This will build the <code>grz-cli</code> docs, deploy them to your local <code>gh-pages</code> branch, and start a webserver serving from that local branch.</p> <p>Use the version selection drop-down in the header bar to load the \"development\" docs you just deployed instead of the default stable docs.</p>"},{"location":"clinic/","title":"Instructions for participating clinics","text":""},{"location":"clinic/#installation","title":"Installation","text":""},{"location":"clinic/#requirements","title":"Requirements","text":"<p>Linux is the only supported operating system. A Linux environment can be acquired in many different ways, for example:</p> <ul> <li>A server running Linux directly</li> <li>A virtual machine running Linux</li> <li>A Docker container</li> <li>Windows Subsystem for Linux</li> </ul> <p>Currently, the encrypted copies of each file are cached within the submission folder. This means that at least the total size of the submission in extra free disk space is needed before starting.</p>"},{"location":"clinic/#using-conda-recommended","title":"Using Conda (recommended)","text":"<p>If Conda is not yet available on your system, we recommend to install it through the Miniforge Conda installer by running the following commands:</p> <pre><code>curl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh\"\nbash \"Miniforge3-$(uname)-$(uname -m).sh\"\n</code></pre> <p>Next, install <code>grz-cli</code>:</p> <pre><code>conda create -n grz-tools -c conda-forge -c bioconda grz-cli\nconda activate grz-tools\ngrz-cli --help\n</code></pre>"},{"location":"clinic/#updating","title":"Updating","text":"<p>Use the following command to update <code>grz-cli</code>:</p> <pre><code>conda update -n grz-tools -c conda-forge -c bioconda grz-cli\n</code></pre>"},{"location":"clinic/#using-docker","title":"Using Docker","text":"<p>Docker images are unofficially available from BioContainers. These are automatically built from the Bioconda package and the <code>grz-cli</code> developers do not control their availability or tags.</p> <p>The build process can take at least a few days after the Bioconda release, so please double-check that the latest Docker image version available from BioContainers is also the latest version in Bioconda.</p>"},{"location":"clinic/#using-pip","title":"Using pip","text":"<p>While installation via <code>pip</code> is possible, it is not recommended because it requires careful consideration of the desired installation environment and ensuring that a supported Python version is being used.</p> <pre><code>pip install grz-cli\n</code></pre>"},{"location":"clinic/#updating_1","title":"Updating","text":"<p>Use the following command to update <code>grz-cli</code>:</p> <pre><code>pip upgrade grz-cli\n</code></pre>"},{"location":"clinic/#usage","title":"Usage","text":""},{"location":"clinic/#configuration","title":"Configuration","text":"<p>Info</p> <p>The configuration file will be provided by your associated GDC. Do not create this file yourself.</p> <p>The tool requires a configuration file in YAML format to specify your genome data center's S3 API parameters, their inbox public key for encryption, and other validation options.</p> <p>This file may be placed at <code>~/.config/grz-cli/config.yaml</code> or provided each time to <code>grz-cli</code> using the <code>--config-file</code> option on the command line.</p> <p>The S3 secrets can either be directly defined within the config file or with the usual AWS environment variables: <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code>.</p>"},{"location":"clinic/#submission-layout","title":"Submission Layout","text":"<p>It is recommended to have the following folder structure for a single submission:</p> <pre><code>EXAMPLE_SUBMISSION\n\u251c\u2500\u2500 files\n\u2502   \u251c\u2500\u2500 donor1_blood_normal.read1.fastq.gz\n\u2502   \u251c\u2500\u2500 donor1_blood_normal.read2.fastq.gz\n\u2502   \u251c\u2500\u2500 donor1_blood_normal.vcf\n\u2502   \u251c\u2500\u2500 donor1_blood_tumor.read1.fastq.gz\n\u2502   \u251c\u2500\u2500 donor1_blood_tumor.read2.fastq.gz\n\u2502   \u251c\u2500\u2500 donor1_blood_tumor.vcf\n\u2502   \u2514\u2500\u2500\u2500 target_regions.bed\n\u2514\u2500\u2500 metadata\n    \u2514\u2500\u2500 metadata.json\n</code></pre> <p>Warning</p> <p>Do not use the tanG anywhere in your file names. GDCs cannot keep the tanG long-term and file names are archived without modification.</p> <p>The only requirements are that <code>metadata/metadata.json</code> exists and the <code>files/</code> directory contains all of the other files. Data files can be nested under subfolders inside <code>files/</code> for better organization. For example, each donor could have their own folder for files.</p>"},{"location":"clinic/#submitting","title":"Submitting","text":"<p>After preparing your submission as outlined above, you can use the following command to validate, encrypt, and upload the submission all at once:</p> <pre><code>grz-cli submit --submission-dir EXAMPLE_SUBMISSION/\n</code></pre> <p>Alternatively, there are separate subcommands for each step. See <code>grz-cli --help</code> or this page for more information on the command line interface of <code>grz-cli</code>.</p>"},{"location":"clinic/#troubleshooting","title":"Troubleshooting","text":"<p>In case of issues, please re-run your commands with <code>grz-cli --log-level DEBUG --log-file path/to/write/file.log [...]</code> and submit the log file to your GDC's data steward.</p>"},{"location":"gdc/","title":"Genome Data Centers (GDC)","text":"<p>Only relevant for GDC staff</p> <p>If you are staff at a clinic looking to upload submissions to a genome data center, see these instructions instead.</p>"},{"location":"gdc/#configuration-files","title":"Configuration Files","text":"<p>Genome data centers are responsible for supplying the YAML configuration file for <code>grz-cli</code> to their associated clinics.</p> <p>The purpose of this file is to provide values for the following:</p> <ul> <li>Crypt4GH public key for encryption</li> <li>Expected IDs for the clinic and data node (genome data center)</li> <li>S3 API parameters</li> </ul> <p>A minimal configuration file might look like the following:</p> <pre><code>keys:\n  grz_public_key: |2\n    -----BEGIN CRYPT4GH PUBLIC KEY-----\n    i/TkbXjDDLnb0OvZ7VmF8GwRXXxTg1djpT8JC8GSfAw=\n    -----END CRYPT4GH PUBLIC KEY-----\n\nidentifiers:\n  grz: 'GRZABC123'\n  le: '123456789'\n\ns3:\n  endpoint_url: 'https://your-s3-endpoint.com'\n  bucket: 'grz-inbox-123'\n</code></pre> <p>Note that this does not include the required S3 <code>access_key</code> and <code>secret</code>.</p> <p>There are two ways to provide these S3 secrets:</p> <ol> <li>Integrated into the config file under the <code>s3</code> key (see below).</li> <li>Provided separately and instructing clinics to define them in the usual AWS environment variables:<ul> <li><code>AWS_ACCESS_KEY_ID</code></li> <li><code>AWS_SECRET_ACCESS_KEY</code></li> </ul> </li> </ol> <p>The first solution is the easiest but has the disadvantage of storing the secrets to disk, which may have security implications.</p> <p>The following sections show documentation for the Pydantic models of each top-level section. The attributes represent possible YAML keys.</p>"},{"location":"gdc/#keys","title":"<code>keys</code>","text":""},{"location":"gdc/#grz_common.models.keys.KeyModel","title":"<code>grz_common.models.keys.KeyModel</code>","text":""},{"location":"gdc/#grz_common.models.keys.KeyModel.grz_private_key_path","title":"<code>grz_private_key_path = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Path to the crypt4gh private key of the recipient (optional).</p>"},{"location":"gdc/#grz_common.models.keys.KeyModel.grz_public_key","title":"<code>grz_public_key = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The public key of the recipient (the associated GRZ).</p>"},{"location":"gdc/#grz_common.models.keys.KeyModel.grz_public_key_path","title":"<code>grz_public_key_path = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Path to the crypt4gh public key of the recipient (the associated GRZ).</p>"},{"location":"gdc/#grz_common.models.keys.KeyModel.submitter_private_key_path","title":"<code>submitter_private_key_path = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Path to the submitter's private key (optional).</p>"},{"location":"gdc/#identifiers","title":"<code>identifiers</code>","text":""},{"location":"gdc/#grz_common.models.identifiers.IdentifiersModel","title":"<code>grz_common.models.identifiers.IdentifiersModel</code>","text":""},{"location":"gdc/#grz_common.models.identifiers.IdentifiersModel.grz","title":"<code>grz</code>  <code>instance-attribute</code>","text":"<p>Id of the GRZ.</p>"},{"location":"gdc/#grz_common.models.identifiers.IdentifiersModel.le","title":"<code>le</code>  <code>instance-attribute</code>","text":"<p>Id of the Leistungserbringer.</p>"},{"location":"gdc/#s3","title":"<code>s3</code>","text":""},{"location":"gdc/#grz_common.models.s3.S3Options","title":"<code>grz_common.models.s3.S3Options</code>","text":""},{"location":"gdc/#grz_common.models.s3.S3Options.access_key","title":"<code>access_key = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The access key for the S3 bucket. If undefined, it is read from the AWS_ACCESS_KEY_ID environment variable.</p>"},{"location":"gdc/#grz_common.models.s3.S3Options.api_version","title":"<code>api_version = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The S3 API version.</p>"},{"location":"gdc/#grz_common.models.s3.S3Options.bucket","title":"<code>bucket</code>  <code>instance-attribute</code>","text":"<p>The name of the S3 bucket.</p>"},{"location":"gdc/#grz_common.models.s3.S3Options.endpoint_url","title":"<code>endpoint_url</code>  <code>instance-attribute</code>","text":"<p>The URL for the S3 service.</p>"},{"location":"gdc/#grz_common.models.s3.S3Options.multipart_chunksize","title":"<code>multipart_chunksize = 256 * 1024 ** 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The size of the chunks to use for multipart uploads in bytes.</p>"},{"location":"gdc/#grz_common.models.s3.S3Options.proxy_config","title":"<code>proxy_config = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Proxy configuration for S3 operations.</p>"},{"location":"gdc/#grz_common.models.s3.S3Options.proxy_url","title":"<code>proxy_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The proxy URL for S3 operations (optional).</p>"},{"location":"gdc/#grz_common.models.s3.S3Options.region_name","title":"<code>region_name = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The region name for the S3 bucket.</p>"},{"location":"gdc/#grz_common.models.s3.S3Options.request_checksum_calculation","title":"<code>request_checksum_calculation = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to calculate checksums for S3 request payloads (optional). Valid values are:</p> <ul> <li> <p><code>when_supported</code> -- When set, a checksum will be calculated for   all request payloads of operations modeled with the <code>httpChecksum</code>   trait where <code>requestChecksumRequired</code> is <code>true</code> or a   <code>requestAlgorithmMember</code> is modeled.</p> </li> <li> <p><code>when_required</code> -- When set, a checksum will only be calculated   for request payloads of operations modeled with the <code>httpChecksum</code>   trait where <code>requestChecksumRequired</code> is <code>true</code> or where a   <code>requestAlgorithmMember</code> is modeled and supplied.</p> </li> </ul> <p>Defaults to None.</p>"},{"location":"gdc/#grz_common.models.s3.S3Options.secret","title":"<code>secret = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The secret key for the S3 bucket. If undefined, it is read from the AWS_SECRET_ACCESS_KEY environment variable.</p>"},{"location":"gdc/#grz_common.models.s3.S3Options.session_token","title":"<code>session_token = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The session token for temporary credentials (optional).</p>"},{"location":"gdc/#grz_common.models.s3.S3Options.use_ssl","title":"<code>use_ssl = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to use SSL for S3 operations.</p>"}]}